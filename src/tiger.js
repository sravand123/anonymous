/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var $= null
var tiger = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,13],$V7=[1,11],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,20],$Ve=[1,21],$Vf=[1,24],$Vg=[1,23],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[6,13,16,20,21,22,23,24,25,26,27,28,29,30,31,32,37,38,40,42,44,45,49,50,53,57],$Vs=[2,45],$Vt=[2,41],$Vu=[1,40],$Vv=[2,56],$Vw=[6,44],$Vx=[2,48],$Vy=[6,13,16,20,37,38,40,42,44,45,49,50,53,57],$Vz=[20,45],$VA=[6,13,16,20,21,22,25,26,27,28,29,30,31,32,37,38,40,42,44,45,49,50,53,57],$VB=[6,13,16,20,31,32,37,38,40,42,44,45,49,50,53,57],$VC=[20,53],$VD=[6,11,13,16,20,21,22,23,24,25,26,27,28,29,30,31,32,34,37,38,40,42,44,45,46,49,50,53,57],$VE=[1,104],$VF=[2,37],$VG=[6,44,49,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"SCRIPT":3,"PROGRAM":4,"EXP":5,"EOF":6,"DECS":7,"NIL":8,"CONST":9,"STRING":10,"LSQPAREN":11,"ELEMENTS":12,"RSQPAREN":13,"LCURLPAREN":14,"RECS":15,"RCURLPAREN":16,"ID":17,"LPAREN":18,"PARAMS":19,"RPAREN":20,"MINUS":21,"PLUS":22,"MUL":23,"DIV":24,"LE":25,"GRT":26,"LEQ":27,"GEQ":28,"NEQ":29,"EQ":30,"AND":31,"OR":32,"LVALUE":33,"ASSIGN":34,"EXPS":35,"IF":36,"THEN":37,"ELSE":38,"WHILE":39,"DO":40,"FOR":41,"TO":42,"LET":43,"IN":44,"END":45,"DOT":46,"BREAK":47,"DEC":48,"VAR":49,"FUNCTION":50,"TYFIELDS":51,"TYFIELD":52,"COMMA":53,"REC":54,"COLON":55,"PARAM":56,"SEMICOLON":57,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"NIL",9:"CONST",10:"STRING",11:"LSQPAREN",13:"RSQPAREN",14:"LCURLPAREN",16:"RCURLPAREN",17:"ID",18:"LPAREN",20:"RPAREN",21:"MINUS",22:"PLUS",23:"MUL",24:"DIV",25:"LE",26:"GRT",27:"LEQ",28:"GEQ",29:"NEQ",30:"EQ",31:"AND",32:"OR",34:"ASSIGN",36:"IF",37:"THEN",38:"ELSE",39:"WHILE",40:"DO",41:"FOR",42:"TO",43:"LET",44:"IN",45:"END",46:"DOT",47:"BREAK",49:"VAR",50:"FUNCTION",53:"COMMA",55:"COLON",57:"SEMICOLON"},
productions_: [0,[3,1],[4,2],[4,2],[5,1],[5,1],[5,1],[5,3],[5,3],[5,4],[5,2],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,1],[5,3],[5,3],[5,4],[5,6],[5,4],[5,8],[5,5],[5,6],[5,1],[48,4],[48,7],[7,1],[7,2],[51,0],[51,3],[51,1],[52,1],[15,0],[15,3],[15,1],[54,3],[12,0],[12,1],[12,3],[19,0],[19,1],[19,3],[56,1],[33,1],[33,3],[33,4],[33,4],[35,0],[35,1],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            console.log(JSON.stringify( {
                type:"File",
                program:$$[$0]
            }));
            return $$[$0];
        
break;
case 2:
this.$= {
            type:"Program",
            body:[
               $$[$0-1]
            ]
        };
break;
case 3:
this.$= {
            type:"Program",
            body:$$[$0-1]
        };
break;
case 4:
this.$ = {
                type:"NullLiteral"
            };
break;
case 5:

                    this.$={type:"NumericLiteral",
                    value:Number($$[$0])
                } ;
break;
case 6:

                    this.$={type:"StringLiteral",
                    value:($$[$0].slice(1, -1))
                } ;
break;
case 7:

                this.$={
                    type:"ArrayExpression",
                    elements:$$[$0-1]
                };
        
break;
case 8:
 this.$={
                    type:"ObjectExpression",
                    properties:$$[$0-1]
                };  
break;
case 9:

                this.$={
                    type:"CallExpression",
                    callee:{

                        type:"Identifier",
                        name:$$[$0-3]
                    },
                    arguments:$$[$0-1] ? $$[$0-1]: []
                };

       
break;
case 10:
this.$={
                                            type:"BinaryExpression",
                                            left:{
                                                type:"NumericLiteral",
                                                value:0
                                            },
                                            operator:'-',
                                            right:$$[$0]


                                    };
break;
case 11:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'+',
                                            right:$$[$0]


                                    };
break;
case 12:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'-',
                                            right:$$[$0]


                                    };
break;
case 13:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'*',
                                            right:$$[$0]


                                    };
break;
case 14:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'/',
                                            right:$$[$0]


                                    };
break;
case 15:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'<',
                                            right:$$[$0]


                                    };
break;
case 16:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'>',
                                            right:$$[$0]


                                    };
break;
case 17:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'<=',
                                            right:$$[$0]


                                    };
break;
case 18:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'>=',
                                            right:$$[$0]


                                    };
break;
case 19:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'!=',
                                            right:$$[$0]


                                    };
break;
case 20:
this.$={
                                            type:"BinaryExpression",
                                            left:$$[$0-2],
                                            operator:'==',
                                            right:$$[$0]


                                    };
break;
case 21:
this.$={
                                            type:"LogicalExpression",
                                            left:$$[$0-2],
                                            operator:'&&',
                                            right:$$[$0]


                                    };
break;
case 22:
this.$={
                                            type:"LogicalExpression",
                                            left:$$[$0-2],
                                            operator:'||',
                                            right:$$[$0]


                                    };
break;
case 23:

                                this.$=$$[$0];
                            
break;
case 24:

                                                    this.$={
                                                        type:"AssignmentExpression",
                                                        operator:'=',
                                                        left:$$[$0-2],
                                                        right:$$[$0]

                                                    };
                                                
break;
case 25:
this.$=  {

                                            type:"CallExpression",
                                            callee:  {
                                                type:"ParenthesizedExpression",
                                                expression:{
                                                                type:"FunctionExpression",
                                                                async:false,
                                                                generator:false,
                                                                extra:{
                                                                    parenthesized:true
                                                                },
                                                                params:[],
                                                                body:{
                                                                    type:"BlockStatement",
                                                                    body:$$[$0-1]
                                                                    
                                                                }
                                            }
                                            },
                                        
                                         arguments:[]

                                        }  ;                     

                            
break;
case 26:


                                                        this.$={
                                                            type:"IfStatement",
                                                            test:$$[$0-2],
                                                            consequent:{
                                                                type:"BlockStatement",
                                                                body:[
                                                                    $$[$0]
                                                                ]
                                                            }
                                                        };
                                                    
break;
case 27:
 function helper(x,y){

                                                            return {

                                            type:"CallExpression",
                                            callee: {
                                                type:"ParenthesizedExpression",
                                                expression:{
                                                                type:"FunctionExpression",
                                                                async:false,
                                                                generator:false,
                                                                extra:{
                                                                    parenthesized:true
                                                                },
                                                                params:[],
                                                                body:{
                                                                    type:"BlockStatement",
                                                                    body:[
                                                                        {
                                                                            type:"IfStatement",
                                                                            test:$$[$0-4],
                                                                            consequent:{
                                                                                type:"BlockStatement",
                                                                                body:  x
                                                                            },
                                                                            alternate:{
                                                                             type:"BlockStatement",
                                                                                body:y
                                                                            }
                                                                        }
                                                                    ]
                                                                    
                                                                }
                                            }
                                            },
                                         arguments:[]

                                        }
                                        };
                                        let temp1 = null;
                                        let temp2 = null;
                                         if ($$[$0-2].type== "WhileStatement"){
                                                temp1=[
                                                    $$[$0-2],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];                                                                        
                                        }
                                        else if($$[$0-2].type== "AssignmentExpression"){
                                             temp1=[
                                                    $$[$0-2],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];  
                                        }
                                         else if($$[$0-2].type== "IfStatement" && !($$[$0-2].alternate)){
                                             temp1=[
                                                    $$[$0-2],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];  
                                        }
                                          else if($$[$0-2].type== "BreakStatement"){
                                             temp1=[
                                                    $$[$0-2]
                                                  
                                                ];  
                                        }

                                        else{

                                        temp1=[
                                            {
                                                 type:"ReturnStatement",
                                                 argument:$$[$0-2]
                                            }

                                        ];};
                                        if ($$[$0].type== "WhileStatement"){
                                                temp2=[
                                                    $$[$0],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];                                                                        
                                        }
                                        else if($$[$0].type== "AssignmentExpression"){
                                             temp2=[
                                                    $$[$0],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];  
                                        }
                                         else if($$[$0].type== "BreakStatement"){
                                             temp2=[
                                                    $$[$0]
                                                  
                                                ];  
                                        }
                                         else if($$[$0].type== "IfStatement" && !($$[$0].alternate)){
                                             temp2=[
                                                    $$[$0],
                                                    {
                                                         type:"ReturnStatement"
                                                         
                                                    }

                                                ];  
                                        }
                                        else{

                                        temp2=[
                                            {
                                                 type:"ReturnStatement",
                                                 argument:$$[$0]
                                            }

                                        ];};
                                        this.$=helper(temp1,temp2);
                          
                                                       
                                        
break;
case 28:


                                            this.$={
                                                type:"WhileStatement",
                                                test:$$[$0-2],
                                                body:{
                                                    type:"BlockStatement",
                                                    body:[
                                                        $$[$0]
                                                    ]
                                                }
                                            };
                                        
break;
case 29:
 

                                            let varDec = {
                                            type:"VariableDeclaration",
                                            declarations:[

                                                {
                                                    type:"VariableDeclarator",
                                                    id:{
                                                        type:"Identifier",
                                                        name:$$[$0-6],
                                                        },
                                                    init:$$[$0-4]
                                                    

                                                }
                                            ],
                                            kind:"let"
                                            
                                                        
                                        };
                                        let comp = {
                                            type:"BinaryExpression",
                                            left:{
                                                type:"Identifier",
                                                name:$$[$0-6]
                                            },
                                            operator:'<=',
                                            right:$$[$0-2]


                                    }
                                        
                                        let inc = {
                                                type:"BinaryExpression",
                                                operator:'+',
                                                left:{
                                                    type:"Identifier",
                                                    name:$$[$0-6]
                                                },
                                                right:{
                                                type:"NumericLiteral",
                                                value:1
                                                }
                                            }
                                        let ass ={
                                                        type:"AssignmentExpression",
                                                        operator:'=',
                                                        left:{
                                                            type:"Identifier",
                                                            name:$$[$0-6]
                                                        },
                                                        right:inc

                                                    }
                                        let whileStm = {
                                                type:"WhileStatement",
                                                test:comp,
                                                body:{
                                                    type:"BlockStatement",
                                                    body:[
                                                        $$[$0],ass
                                                    ]
                                                }
                                            }
                                            this.$=  {

                                            type:"CallExpression",
                                            callee:{
                                                type:"ParenthesizedExpression",
                                                expression: {
                                                                type:"FunctionExpression",
                                                                async:false,
                                                                generator:false,
                                                                extra:{
                                                                    parenthesized:true,
                                                                    parenStart:1
                                                                },
                                                                id:null,
                                                                params:[],
                                                                body:{
                                                                    type:"BlockStatement",
                                                                    body:[
                                                                      varDec,whileStm
                                                                    ]
                                                                    
                                                                }
                                            }
                                            },
                                         arguments:[]

                                        }  ;                     

                            
break;
case 30:
this.$=  {

                                            type:"CallExpression",
                                            callee:{
                                                type:"ParenthesizedExpression",
                                                expression: {
                                                                type:"FunctionExpression",
                                                                async:false,
                                                                generator:false,
                                                                extra:{
                                                                    parenthesized:true,
                                                                    parenStart:1
                                                                },
                                                                id:null,
                                                                params:[],
                                                                body:{
                                                                    type:"BlockStatement",
                                                                    body:[
                                                                        ...$$[$0-3],...$$[$0-1]
                                                                    ]
                                                                    
                                                                }
                                            }
                                            },
                                         arguments:[]

                                        }  ;                     

                            
break;
case 31:

                                this.$={
                                    type:"CallExpression",
                                    callee:{
                                            type:"MemberExpression",
                                            object:$$[$0-5],
                                            property:{
                                                type:"Identifier",
                                                name:$$[$0-3]
                                            },
                                            computed:false
                                    },
                                    arguments:$$[$0-1]
                                };   
                            
break;
case 32:
this.$={
                                type:"BreakStatement"
                        }
break;
case 33:

                                        this.$={
                                            type:"VariableDeclaration",
                                            declarations:[

                                                {
                                                    type:"VariableDeclarator",
                                                    id:{
                                                        type:"Identifier",
                                                        name:$$[$0-2],
                                                        },
                                                    init:$$[$0]
                                                    

                                                }
                                            ],
                                            kind:"let"
                                            
                                                        
                                        };
                                    
break;
case 34:

                                                            this.$={
                                                                type:"FunctionDeclaration",
                                                                id:{
                                                                    type:"Identifier",
                                                                    name:$$[$0-5]
                                                                
                                                                },
                                                                params:$$[$0-3],
                                                                async:false,
                                                                generator:false,
                                                                body:{
                                                                    type:"BlockStatement",
                                                                    body:[
                                                                        {
                                                                            type:"ReturnStatement",
                                                                            argument:$$[$0]
                                                                        }
                                                                    ]
                                                                }
                                                            };
                                                        
break;
case 35: case 39: case 43: case 46: case 49:
this.$=[$$[$0]];
break;
case 36:
this.$=[$$[$0-1],...$$[$0]];
break;
case 37:
this.$=[]
break;
case 38: case 42: case 47: case 50:
this.$=[$$[$0-2],...$$[$0]];
break;
case 40:

        this.$={
                type:"Identifier",
                name:$$[$0]
            };
          

break;
case 41: case 45:
this.$=[];
break;
case 44:

                            this.$={
                                type:"ObjectProperty",
                                key:{
                                    type:"Identifier",
                                    name:$$[$0-2]
                                },
                                value:$$[$0],
                                computed:false,
                                method:false


                            }
                        
break;
case 48:
$=[];
break;
case 51:
this.$=$$[$0];
break;
case 52:

                                this.$={
                                    type:"Identifier",
                                    name:$$[$0]
                                };
                            
break;
case 53:

                                this.$={
                                    type:"MemberExpression",
                                    computed:false,
                                    object:$$[$0-2],
                                    property:{
                                        type:"Identifier",
                                        name:$$[$0]
                                    }
                                };
                            
break;
case 54:

                                this.$={
                                    type:"MemberExpression",
                                    computed:true,
                                    object:{
                                        type:"Identifier",
                                        name:$$[$0-3]
                                    },
                                    property:$$[$0-1]
                                };
                            
break;
case 55:

                                this.$={
                                    type:"MemberExpression",
                                    computed:true,
                                    object:$$[$0-3],
                                    property:$$[$0-1]
                                };
                            
break;
case 56:
this.$=[
                                                                                    {
                                                                                        type:"ReturnStatement",

                                                                                    }
                                                                                    ];
break;
case 57:



                                                                    if ($$[$0].type== "WhileStatement"){
                                                                            this.$=[
                                                                                $$[$0],
                                                                                {
                                                                                     type:"ReturnStatement"
                                                                                     
                                                                                }

                                                                            ];                                                                        
                                                                    }
                                                                    else if($$[$0].type== "AssignmentExpression"){
                                                                         this.$=[
                                                                                $$[$0],
                                                                                {
                                                                                     type:"ReturnStatement"
                                                                                     
                                                                                }

                                                                            ];  
                                                                    }
                                                                     else if($$[$0].type== "IfStatement" && !($$[$0].alternate)){
                                                                         this.$=[
                                                                                $$[$0],
                                                                                {
                                                                                     type:"ReturnStatement"
                                                                                     
                                                                                }

                                                                            ];  
                                                                    }
                                                                     else if($$[$0].type== "BreakStatement"){
                                                                         this.$=[
                                                                                $$[$0]
                                                                              
                                                                            ];  
                                                                    }
                                                                    else{

                                                                    this.$=[
                                                                        {
                                                                             type:"ReturnStatement",
                                                                             argument:$$[$0]
                                                                        }

                                                                    ];}                                        
                                                                
break;
case 58:
this.$=[$$[$0-2],...$$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc,48:19,49:$Vd,50:$Ve},{1:[3]},{1:[2,1]},{6:[1,22],21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq},{6:[1,35]},o($Vr,[2,4]),o($Vr,[2,5]),o($Vr,[2,6]),{5:37,8:$V0,9:$V1,10:$V2,11:$V3,12:36,13:$Vs,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{15:38,16:$Vt,17:$Vu,54:39},o([6,13,16,20,21,22,23,24,25,26,27,28,29,30,31,32,34,37,38,40,42,44,45,46,49,50,53,57],[2,52],{11:[1,42],18:[1,41]}),{5:43,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},o($Vr,[2,23],{11:[1,46],34:[1,44],46:[1,45]}),{5:48,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,20:$Vv,21:$V7,33:12,35:47,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:49,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:50,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{17:[1,51]},{7:52,48:19,49:$Vd,50:$Ve},o($Vr,[2,32]),o($Vw,[2,35],{48:19,7:53,49:$Vd,50:$Ve}),{17:[1,54]},{17:[1,55]},{1:[2,2]},{5:56,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:57,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:58,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:59,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:60,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:61,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:62,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:63,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:64,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:65,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:66,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:67,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{1:[2,3]},{13:[1,68]},{13:[2,46],21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,53:[1,69]},{16:[1,70]},{16:[2,43],53:[1,71]},{55:[1,72]},{5:75,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,19:73,20:$Vx,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc,56:74},{5:76,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},o($Vy,[2,10],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),{5:77,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{17:[1,78]},{5:79,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{20:[1,80]},o($Vz,[2,57],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,57:[1,81]}),{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,37:[1,82]},{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,40:[1,83]},{34:[1,84]},{44:[1,85]},o($Vw,[2,36]),{34:[1,86]},{18:[1,87]},o($VA,[2,11],{23:$Vh,24:$Vi}),o($VA,[2,12],{23:$Vh,24:$Vi}),o($Vr,[2,13]),o($Vr,[2,14]),o($VB,[2,15],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,16],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,17],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,18],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,19],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,20],{21:$Vf,22:$Vg,23:$Vh,24:$Vi}),o($VB,[2,21],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo}),o([6,13,16,20,32,37,38,40,42,44,45,49,50,53,57],[2,22],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp}),o($Vr,[2,7]),{5:37,8:$V0,9:$V1,10:$V2,11:$V3,12:88,13:$Vs,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},o($Vr,[2,8]),{15:89,16:$Vt,17:$Vu,54:39},{5:90,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{20:[1,91]},{20:[2,49],53:[1,92]},o($VC,[2,51],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),{13:[1,93],21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq},o($Vy,[2,24],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),o($VD,[2,53],{18:[1,94]}),{13:[1,95],21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq},o($Vr,[2,25]),o($Vz,$Vv,{33:12,5:48,35:96,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc}),{5:97,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:98,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:99,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:48,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,35:100,36:$V8,39:$V9,41:$Va,43:$Vb,45:$Vv,47:$Vc},{5:101,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{17:$VE,20:$VF,51:102,52:103},{13:[2,47]},{16:[2,42]},o([16,53],[2,44],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),o($Vr,[2,9]),{5:75,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,19:105,20:$Vx,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc,56:74},o($VD,[2,54]),{5:75,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,19:106,20:$Vx,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc,56:74},o($VD,[2,55]),o($Vz,[2,58]),o([6,13,16,20,37,40,42,44,45,49,50,53,57],[2,26],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,38:[1,107]}),o($Vy,[2,28],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,42:[1,108]},{45:[1,109]},o($VG,[2,33],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),{20:[1,110]},{20:[2,39],53:[1,111]},o($VC,[2,40]),{20:[2,50]},{20:[1,112]},{5:113,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{5:114,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},o($Vr,[2,30]),{30:[1,115]},{17:$VE,20:$VF,51:116,52:103},o($Vr,[2,31]),o($Vy,[2,27],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq,40:[1,117]},{5:118,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},{20:[2,38]},{5:119,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,17:$V5,18:$V6,21:$V7,33:12,36:$V8,39:$V9,41:$Va,43:$Vb,47:$Vc},o($VG,[2,34],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq}),o($Vy,[2,29],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:$Vm,29:$Vn,30:$Vo,31:$Vp,32:$Vq})],
defaultActions: {2:[2,1],22:[2,2],35:[2,3],88:[2,47],89:[2,42],105:[2,50],116:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 9 ;
break;
case 4:return 10;
break;
case 5:return 34;
break;
case 6:return 36;
break;
case 7:return 38;
break;
case 8:return 37;
break;
case 9:return 45;
break;
case 10:return 44;
break;
case 11:return 40;
break;
case 12:return 42;
break;
case 13:return 41;
break;
case 14:return 39;
break;
case 15:return 'ARRAY';
break;
case 16:return 50;
break;
case 17:return  'LET';
break;
case 18:return 22;
break;
case 19:return 27;
break;
case 20:return 28;
break;
case 21:return 26;
break;
case 22:return 25;
break;
case 23:return 30;
break;
case 24:return 29;
break;
case 25:return 31;
break;
case 26:return 32;
break;
case 27:return 21;
break;
case 28:return 'OF';
break;
case 29:return 8;
break;
case 30:return 'TYPE';
break;
case 31:return 55;
break;
case 32:return 49;
break;
case 33:return 46;
break;
case 34:return 53;
break;
case 35:return 47;
break;
case 36:return 24;
break;
case 37:return 23;
break;
case 38:return 18;
break;
case 39:return 20;
break;
case 40:return 11;
break;
case 41:return 13;
break;
case 42:return 14;
break;
case 43:return 16;
break;
case 44:return 57;
break;
case 45:return 17;
break;
case 46:return 6;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?::=)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:end\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:to\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:array\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:<>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:-)/,/^(?:of\b)/,/^(?:nil\b)/,/^(?:type\b)/,/^(?::)/,/^(?:var\b)/,/^(?:\.)/,/^(?:,)/,/^(?:break\b)/,/^(?:\/)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:[a-z_A-Z]+[0-9]*[a-z_A-Z]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export {tiger}
// if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
// exports.parser = tiger;
// exports.Parser = tiger.Parser;
// exports.parse = function () { return tiger.parse.apply(tiger, arguments); };
// exports.main = function commonjsMain (args) {
//     if (!args[1]) {
//         console.log('Usage: '+args[0]+' FILE');
//         process.exit(1);
//     }
//     var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
//     return exports.parser.parse(source);
// };
// if (typeof module !== 'undefined' && require.main === module) {
//   exports.main(process.argv.slice(1));
// }
// }